syntax = "proto3";

package battle;

option go_package = "/msg";

service Battle {
  rpc StartBattle(ReqStartBattle) returns (RespStartBattle) {}
  rpc StopBattle(ReqStopBattle) returns (RespStopBattle) {}
  rpc JoinBattle(ReqJoinBattle) returns (RespJoinBattle) {}
  rpc QuitBattle(ReqQuitBattle) returns (RespQuitBattle) {}
}

enum PlayerRoleType {
  Player = 0;
  Robot = 1;
}

message PlayerInfo {
  uint64 uid = 1;
  uint32 seat_id = 2;
  PlayerRoleType role = 3;
  int64 main_score = 4;
  repeated int64 sub_scores = 5;
  map<string, string> extra = 6;
}

message BattleConfig {
  uint32 max_battle_time = 1;
}

message ReqStartBattle {
  BattleConfig battle_conf = 1;
  string logic_name = 2;
  bytes logic_conf = 3;
  repeated PlayerInfo player_infos = 4;
  string callback_url = 5;
}

message RespStartBattle {
  string battle_id = 1;
}

message ReqStopBattle {
  string battle_id = 1;
}

message RespStopBattle {}

message ReportBattleOver {
  enum State {
    Finished = 0;  // 完成
    Disbanded = 1; // 解散
    Timeover = 2;  // 超时
  }

  message BattleScore {
    int64 score = 1;
    map<string, string> extra = 2;
  }

  State state = 1;
  map<int32, BattleScore> tally = 2;
}

message EventBattleStatusChange {
  string battle_id = 1;
  int32 status_before = 2;
  int32 status_now = 3;
}

message EventBattleStart {}

message EventBattleOver {}

message ReqJoinBattle {
  string battle_id = 1;
  int32 ready_state = 2;
}

message RespJoinBattle {
  message ReadyInfo {
    uint32 seat_id = 1;
    int64 uid = 2;
    int32 ready_state = 3;
  }
  repeated ReadyInfo ready_info = 1;
}

message ReqQuitBattle {
  string battle_id = 1;
}

message RespQuitBattle {
  string battle_id = 1;
}

message BattleMessageWrap {
  string battle_id = 1;
  bytes head = 3;
  bytes body = 4;
}

message NotifyPlayerStatus {
  uint32 seat_id = 1;
  bool is_online = 2;
}

enum BattleStatus {
  Idle = 0;
  Started = 100;
  Over = 200;
}

message NotifyBattleStatus {
  BattleStatus status = 1;
}

message BattleInfo {
  BattleStatus curr_status = 1;
}

message ReqBattleInfo {}

message RespBattlInfo {
  BattleInfo battle_info = 1;
  repeated PlayerInfo player_infos = 2;
}

message MsgToClientWrap {
  bytes head = 1;
  bytes body = 2;
}

message MsgToLogicWrap {
  bytes head = 1;
  bytes body = 2;
}