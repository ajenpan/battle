syntax = "proto3";

package battle;

option go_package = "/messages";

service Battle {

  rpc StartBattle(StartBattleRequest) returns (StartBattleResponse) {}
  rpc StopBattle(StopBattleRequest) returns (StopBattleResponse) {}

  rpc PlayerJoinBattle(PlayerJoinBattleRequest) returns (PlayerJoinBattleResonse) {}
  rpc PlayerQuitBattle(PlayerQuitBattleRequest) returns (PlayerQuitBattleResponse) {}
}

enum PlayerRoleType {
  Player = 0;
  Robot = 1;
}

message PlayerInfo {
  uint64 uid = 1;
  uint32 seat_id = 2;
  PlayerRoleType role = 3;
  int64 main_score = 4;
  repeated int64 sub_score = 5;
  map<string, string> extra = 6;
}

message TableConfig {
  uint32 max_battle_time = 1;
}

message StartBattleRequest {
  TableConfig table_conf = 1;
  string battle_name = 2;
  bytes battle_conf = 3;
  repeated PlayerInfo player_infos = 4;
  string callback_url = 5;
}

message StartBattleResponse {
  string battle_id = 1;
}

message StopBattleRequest {
  string battle_id = 1;
}

message StopBattleResponse {}

message BattleOverReport {
  enum State {
    Finished = 0;  // 完成
    Disbanded = 1; // 解散
    Timeover = 2;  // 超时
  }

  message BattleScore {
    int64 score = 1;
    map<string, string> extra = 2;
  }

  State state = 1;
  map<int32, BattleScore> tally = 2;
}

message BattleStatusChangeEvent {
  string battle_id = 1;
  int32 status_before = 2;
  int32 status_now = 3;
}

message BattleStartEvent {}

message BattleOverEvent {}

message PlayerJoinBattleRequest {
  string battle_id = 1;
  int32 ready_state = 2;
}

message PlayerJoinBattleResonse {
  message ReadyInfo {
    int32 seat_id = 1;
    int64 uid = 2;
    int32 ready_state = 3;
  }
  repeated ReadyInfo ready_info = 1;
}

message PlayerQuitBattleRequest {
  string battle_id = 1;
}

message PlayerQuitBattleResponse {
  string battle_id = 1;
}

message BattlePlayerMessageWrap {
  string battle_id = 1;
  bytes head = 3;
  bytes body = 4;
}